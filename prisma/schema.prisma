// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Admission {
  id          String  @id @default(cuid())
  entryDate   String
  entryHour   String
  bedNumber   String
  description String?

  emergencyMeals     EmergencyMeals[]
  emergencyConsult   EmergencyConsult @relation(fields: [emergencyConsultId], references: [id])
  emergencyConsultId String           @unique
}

model AppliedTerapeutic {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  appliedBy String

  terapeutic   Terapeutic @relation(fields: [terapeuticId], references: [id])
  terapeuticId String
}

model Company {
  id           String               @id @default(cuid())
  createdAt    DateTime             @default(now())
  name         String               @unique
  industry     String
  email        String?
  number       String?
  appointments CompanyAppointment[]

  @@index([name])
}

model CompanyAppointment {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  date        DateTime
  examType    String
  companyRole String
  planType    String?
  covid       String?
  local       String?
  location    String
  addInfo     String?

  orderOfPresence  Int? 
  wasPresent  Boolean @default(false)
  presentAt   DateTime?
  areNurseryExamsDone  Boolean @default(false)
  areLabExamsDone Boolean @default(false)
  isArquived  Boolean @default(false)
  
  companyId   String
  userId      String
  triage  Triage?
  userHistory UserHistory?
  medicalFile CompanyAppointmentMedicalFile?
  company     Company  @relation(fields: [companyId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
  nurseryExams NurseryExam[]
  labExams LabExams[]
  riskFactors RiskFactors?

  @@index([date, areNurseryExamsDone, areLabExamsDone, wasPresent])
}

model CompanyAppointmentMedicalFile {
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  app String?
  apf String?
  etilicHabits String?
  tobaccoHabits String?
  surgerys String?
  allergys String?
  admissions String?
  epis String?

  companyAppointmentId String @unique
  companyAppointment CompanyAppointment @relation(fields: [companyAppointmentId], references: [id])

}

model EmergencyConsult {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  entryDate String
  entryTime String
  isPaid    Boolean  @default(false)

  release           Release?
  emergencyTransfer EmergencyTransfer?
  nurseFile         NurseFile?
  emergencyTriage   EmergencyTriage?
  admission         Admission?
  medicalFile       MedicalFile?
  medicalItems      MedicalItems[]
  medicalExams      MedicalExams[]
  insurance         Insurance?
  terapeutic        Terapeutic[]

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model EmergencyMeals {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  date        String
  time        String
  typeOfMeal  String
  description String

  admission   Admission @relation(fields: [admissionId], references: [id])
  admissionId String
}

model EmergencyTransfer {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  transportType String
  whereTo       String
  reason        String
  orderBy       String

  emergencyConsult   EmergencyConsult @relation(fields: [emergencyConsultId], references: [id])
  emergencyConsultId String           @unique
}

model EmergencyTriage {
  id               String  @id @default(cuid())
  manchesterDegree String //Red, Orange, Yellow, Green
  weight           String
  height           String
  bloodType        String
  tMin             String
  tMax             String
  degrees          String
  oxygen           String
  complaint        String?
  sintoms          String

  emergencyConsult   EmergencyConsult @relation(fields: [emergencyConsultId], references: [id])
  emergencyConsultId String           @unique
}

model Insurance {
  id       String  @id @default(cuid())
  name     String
  idNumber String?

  emergencyConsult   EmergencyConsult @relation(fields: [emergencyConsultId], references: [id])
  emergencyConsultId String           @unique
}

model LabExams {
  id  String @id @default(cuid())
  createdAt DateTime @default(now())
  examName String
  addInfo String?
  fileLocation  String

  companyAppointmentId String
  companyAppointment CompanyAppointment @relation(fields: [companyAppointmentId], references: [id])

}

model MedicalExams {
  id           String  @id @default(cuid())
  date         String
  hour         String
  name         String
  description  String?
  fileLocation String?

  emergencyConsult   EmergencyConsult @relation(fields: [emergencyConsultId], references: [id])
  emergencyConsultId String
}

model MedicalFile {
  id        String   @id @default(cuid())
  updatedAt DateTime @updatedAt
  app       String? //Antecedentes Patologicos Pessoais
  apf       String? //Antecedentes Patologicos Familiares
  hda       String? //Historia Doen√ßa Atual
  hd        String? //Hipotese Diagnostica
  treatment String? //Tratamento

  emergencyConsult   EmergencyConsult @relation(fields: [emergencyConsultId], references: [id])
  emergencyConsultId String           @unique
}

model MedicalItems {
  id       String @id @default(cuid())
  name     String
  quantity String

  emergencyConsult   EmergencyConsult? @relation(fields: [emergencyConsultId], references: [id])
  emergencyConsultId String?
}

model NurseFile {
  id        String   @id @default(cuid())
  updatedAt DateTime @updatedAt
  text      String?

  emergencyConsult   EmergencyConsult @relation(fields: [emergencyConsultId], references: [id])
  emergencyConsultId String           @unique
}

model NurseryExam {
  id  String @id @default(cuid())
  createdAt DateTime @default(now())
  examName String
  addInfo String?
  fileLocation  String

  companyAppointmentId String
  companyAppointment CompanyAppointment @relation(fields: [companyAppointmentId], references: [id])
}

model PersonalAppointment {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now())
  appointmentDate DateTime
  consultType     String

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model Release {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  exitDate  String
  exitTime  String
  addInfo   String?

  emergencyConsult   EmergencyConsult @relation(fields: [emergencyConsultId], references: [id])
  emergencyConsultId String           @unique
}

model RiskFactors {
  id  String @id @default(cuid())
  pregnantHowMany String?
  tobaccoAmount String?
  alcoholAmount String?
  hospitalizedWhen String?
  visitedDoctorWhen String?
  surgeryWhen String?
  badReactionWhen String?
  allergicReactionCause String?
  otherAllergicReactionsWhichOnes String?
  takeMedicineName String?
  takeMedicineDose String?
  takeMedicineAmountDaily String?
  takeMedicineReason String?
  clinicExam String?

  riskFactorsFields RiskFactorsFields[]
  companyAppointmentId String @unique
  companyAppointment CompanyAppointment @relation(fields: [companyAppointmentId], references: [id])
}

model RiskFactorsFields {
  id String @id @default(cuid())
  name String
  isChecked Boolean

  riskFactorsId String
  riskFactors RiskFactors @relation(fields: [riskFactorsId], references: [id])

  @@unique([name, riskFactorsId])
  @@index([name, riskFactorsId])
}

model Terapeutic {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  description String
  active      Boolean  @default(true)

  appliedTerapeutic  AppliedTerapeutic[]
  emergencyConsult   EmergencyConsult    @relation(fields: [emergencyConsultId], references: [id])
  emergencyConsultId String
}

model Triage {
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  arterialTension String
  pulse String
  weight String
  height String
  temperature String

  companyAppointment  CompanyAppointment @relation(fields: [companyAppointmentId], references: [id]) 
  companyAppointmentId  String @unique
}

model User {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  birthDate   String?
  gender      String?
  nacionality String?
  number      String?
  idNumber    String?  @unique
  email       String?
  address     String?

  xRayRequisition XRayRequisition[]
  personalAppointment PersonalAppointment[]
  companyAppointments CompanyAppointment[]
  emergencyConsult    EmergencyConsult[]
  


  @@unique([name, number])
  @@index([name, number, idNumber])
}

model UserHistory {
  id  String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cancerType String?
  dateOfCancerDiagnostic String?
  dateOfEndCancerTreatment String?
  psychicPatologyType String?
  otherMedicalHistory String?

  companyAppointmentId String @unique
  companyAppointment CompanyAppointment @relation(fields: [companyAppointmentId], references: [id])
  userHistoryFields UserHistoryFields[]

}

model UserHistoryFields {
  id String @id @default(cuid())
  name String 
  isChecked Boolean

  userHistoryId String
  userHistory UserHistory @relation(fields: [userHistoryId], references: [id])
  @@unique([name, userHistoryId])
  @@index([name, userHistoryId])
}

model XRayRequisition {
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  examDescription String
  isPrinted Boolean
  company String?

  userId  String
  user  User  @relation(fields: [userId], references: [id])
  xRayObject XRayObject[]
}

model XRayObject {
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  fileLocation String
  addInfo String?
  
  xRayRequisitionId String
  xRayRequisition XRayRequisition @relation(fields: [xRayRequisitionId], references: [id])
}